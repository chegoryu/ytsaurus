# This file is auto-generated by yt/python/yt/wrapper/bin/generate_client_impl/generate_client_impl.sh, please do not edit it manually!

from .ypath import YPath, TablePath as YTablePath

from typing import Any, Callable, Iterable, Literal, TypeVar, TypedDict

from .format import Format
from .schema.types import ContextProtocol, YtDataclassType, _YtDataclassProtocol, RowIteratorProtocol, OutputRow

from yt.yson.yson_types import (
    YsonType,
    YsonString,
    YsonUnicode,
    YsonIntegerBase,
    YsonDouble,
    YsonBoolean,
)

OtherYtDataclassType = TypeVar("OtherYtDataclassType", bound=_YtDataclassProtocol)

TBaseLayerType = Literal["porto", "docker"]
TSortOrder = Literal["ascending", "descending"]
TObjectType = Literal[
    # Auxiliary.
    "lock",  # 200
    # Static nodes.
    "string_node",  # 300
    "int64_node",  # 301
    "uint64_node",  # 306
    "double_node",  # 302
    "map_node",  # 303
    "list_node",  # 304
    "boolean_node",  # 305
    # Dynamic nodes.
    "file",  # 400
    "table",  # 401
    "journal",  # 423
    "orchid",  # 412
    "link",  # 417
    "document",  # 421
    "replicated_table",  # 425
    # Portals.
    "portal_entrance",  # 11000
    "portal_exit",  # 11001
    "portal_entrance_map",  # 11002
    "portal_exit_map",  # 11003
    "cypress_shard",  # 11004
    "cypress_shard_map",  # 11005
    # Security manager stuff.
    "account",  # 500
    "account_map",  # 414
    "user",  # 501
    "user_map",  # 415
    "group",  # 502
    "group_map",  # 416
    "network_project",  # 503
    "network_project_map",  # 426
    "proxy_role",  # 504
    "http_proxy_role_map",  # 427
    "rpc_proxy_role_map",  # 429
    # Global stuff.
    # A mysterious creature representing the master as a whole.
    "master",  # 600
    "master_cell",  # 601
    "sys_node",  # 602
    # Tablet manager stuff.
    "tablet_cell",  # 700
    "tablet_cell_node",  # 701
    "tablet",  # 702
    "tablet_map",  # 703
    "tablet_cell_map",  # 710
    "sorted_dynamic_tablet_store",  # 704
    "ordered_dynamic_tablet_store",  # 708
    "tablet_partition",  # 705
    "tablet_cell_bundle",  # 706
    "tablet_cell_bundle_map",  # 707
    "table_replica",  # 709
    "tablet_action",  # 711
    "tablet_action_map",  # 712
    # Node tracker stuff.
    "rack",  # 800
    "rack_map",  # 801
    "cluster_node",  # 802
    "cluster_node_node",  # 803
    "cluster_node_map",  # 804
    "data_center",  # 805
    "data_center_map",  # 806
    # Job tracker stuff.
    "scheduler_job",  # 900
    "master_job",  # 901
    # Scheduler.
    "operation",  # 1000
    "scheduler_pool",  # 1001
    "scheduler_pool_tree",  # 1002
    "scheduler_pool_tree_map",  # 1003
    # Object manager stuff.
    "estimated_creation_time_map",  # 1100
]
TPartitionMode = Literal["sorted", "ordered", "unordered"]
TReplicaConsistency = Literal["none", "sync"]

TQueryEngine = Literal["yql", "ql", "chyt", "spyt"]
TQueryFileType = Literal["url", "raw_inline_data"]

ConvertibleToYsonScalar = (
    None | bool | int | float | str | bytes | YsonString | YsonUnicode | YsonIntegerBase | YsonDouble | YsonBoolean
)
ConvertibleToYson = ConvertibleToYsonScalar | list["ConvertibleToYson"] | dict[str, "ConvertibleToYson"] | YsonType

TPath = str | YPath
TTablePath = TPath | YTablePath

TSpec = dict[str, Any]
TTableReaderSpec = TSpec
TTableWriterSpec = TSpec
TJobIOSpec = TSpec
TFileReaderSpec = TSpec
TFileWriterSpec = TSpec

TSchema = Any

TAttributes = ConvertibleToYson
TFormat = str | Format


TMapperAggregator = Callable[
    [RowIteratorProtocol[YtDataclassType]], Iterable[OtherYtDataclassType] | Iterable[OutputRow[OtherYtDataclassType]]
]
TMapperNoContext = Callable[
    [YtDataclassType], Iterable[OtherYtDataclassType] | Iterable[OutputRow[OtherYtDataclassType]]
]
TMapperWithContext = Callable[
    [YtDataclassType, ContextProtocol], Iterable[OtherYtDataclassType] | Iterable[OutputRow[OtherYtDataclassType]]
]
TMapper = TMapperAggregator | TMapperNoContext | TMapperWithContext

TReducer = Callable[
    [RowIteratorProtocol[YtDataclassType]], Iterable[OtherYtDataclassType] | Iterable[OutputRow[OtherYtDataclassType]]
]



class TQueryFile(TypedDict):
    name: str
    content: str
    type: TQueryFileType
